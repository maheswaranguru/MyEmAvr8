
PowerSupply1_5K.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000010  00800100  00000278  000002ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000278  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000002fc  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000032c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000078  00000000  00000000  0000036c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000e90  00000000  00000000  000003e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000008ae  00000000  00000000  00001274  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000005ac  00000000  00000000  00001b22  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000120  00000000  00000000  000020d0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000005a6  00000000  00000000  000021f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000939  00000000  00000000  00002796  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000058  00000000  00000000  000030cf  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e8 e7       	ldi	r30, 0x78	; 120
  7c:	f2 e0       	ldi	r31, 0x02	; 2
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a0 31       	cpi	r26, 0x10	; 16
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 4b 00 	call	0x96	; 0x96 <main>
  8e:	0c 94 3a 01 	jmp	0x274	; 0x274 <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <main>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  96:	2f ef       	ldi	r18, 0xFF	; 255
  98:	89 e6       	ldi	r24, 0x69	; 105
  9a:	98 e1       	ldi	r25, 0x18	; 24
  9c:	21 50       	subi	r18, 0x01	; 1
  9e:	80 40       	sbci	r24, 0x00	; 0
  a0:	90 40       	sbci	r25, 0x00	; 0
  a2:	e1 f7       	brne	.-8      	; 0x9c <main+0x6>
  a4:	00 c0       	rjmp	.+0      	; 0xa6 <main+0x10>
  a6:	00 00       	nop


int main(void)
{
     _delay_ms (500);
    lcdInit();
  a8:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <_Z7lcdInitv>
  ac:	2f ef       	ldi	r18, 0xFF	; 255
  ae:	83 ed       	ldi	r24, 0xD3	; 211
  b0:	90 e3       	ldi	r25, 0x30	; 48
  b2:	21 50       	subi	r18, 0x01	; 1
  b4:	80 40       	sbci	r24, 0x00	; 0
  b6:	90 40       	sbci	r25, 0x00	; 0
  b8:	e1 f7       	brne	.-8      	; 0xb2 <main+0x1c>
  ba:	00 c0       	rjmp	.+0      	; 0xbc <main+0x26>
  bc:	00 00       	nop
    _delay_ms (1000);
    
    lcdWriteChar(0, 5, 'M' );
  be:	4d e4       	ldi	r20, 0x4D	; 77
  c0:	65 e0       	ldi	r22, 0x05	; 5
  c2:	80 e0       	ldi	r24, 0x00	; 0
  c4:	0e 94 31 01 	call	0x262	; 0x262 <_Z12lcdWriteCharhhc>
  c8:	2f ef       	ldi	r18, 0xFF	; 255
  ca:	83 ed       	ldi	r24, 0xD3	; 211
  cc:	90 e3       	ldi	r25, 0x30	; 48
  ce:	21 50       	subi	r18, 0x01	; 1
  d0:	80 40       	sbci	r24, 0x00	; 0
  d2:	90 40       	sbci	r25, 0x00	; 0
  d4:	e1 f7       	brne	.-8      	; 0xce <main+0x38>
  d6:	00 c0       	rjmp	.+0      	; 0xd8 <main+0x42>
  d8:	00 00       	nop
    _delay_ms (1000);
    
    lcdWriteStr(1, 1, "Hi Dai");
  da:	40 e0       	ldi	r20, 0x00	; 0
  dc:	51 e0       	ldi	r21, 0x01	; 1
  de:	61 e0       	ldi	r22, 0x01	; 1
  e0:	81 e0       	ldi	r24, 0x01	; 1
  e2:	0e 94 0f 01 	call	0x21e	; 0x21e <_Z11lcdWriteStrhhPc>
  e6:	2f ef       	ldi	r18, 0xFF	; 255
  e8:	83 ed       	ldi	r24, 0xD3	; 211
  ea:	90 e3       	ldi	r25, 0x30	; 48
  ec:	21 50       	subi	r18, 0x01	; 1
  ee:	80 40       	sbci	r24, 0x00	; 0
  f0:	90 40       	sbci	r25, 0x00	; 0
  f2:	e1 f7       	brne	.-8      	; 0xec <main+0x56>
  f4:	00 c0       	rjmp	.+0      	; 0xf6 <main+0x60>
  f6:	00 00       	nop
  f8:	f6 cf       	rjmp	.-20     	; 0xe6 <main+0x50>

000000fa <_ZL11lcdWriteCmdh>:
 ******************************************************************************/
static void lcdWriteCmd( uint8_t cmd )
{
    uint8_t tempy = cmd;
    
    LCDRS_LOW;
  fa:	44 98       	cbi	0x08, 4	; 8
    tempy &= MSBNIBBLE_MASK;		//!<  Mask Lower 4 Bits
    LCDPORT &= LSBNIBBLE_MASK;	//!<  Make No Affect on 0ther Port Pins
  fc:	9b b1       	in	r25, 0x0b	; 11
  fe:	9f 70       	andi	r25, 0x0F	; 15
 100:	9b b9       	out	0x0b, r25	; 11
    LCDPORT |= tempy;				//!<  Send Higher Nibble to LCDPORT
 102:	9b b1       	in	r25, 0x0b	; 11
 104:	28 2f       	mov	r18, r24
 106:	20 7f       	andi	r18, 0xF0	; 240
 108:	92 2b       	or	r25, r18
 10a:	9b b9       	out	0x0b, r25	; 11
    LCDEN_HIGH;
 10c:	43 9a       	sbi	0x08, 3	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 10e:	ef e1       	ldi	r30, 0x1F	; 31
 110:	f3 e0       	ldi	r31, 0x03	; 3
 112:	31 97       	sbiw	r30, 0x01	; 1
 114:	f1 f7       	brne	.-4      	; 0x112 <_ZL11lcdWriteCmdh+0x18>
 116:	00 c0       	rjmp	.+0      	; 0x118 <_ZL11lcdWriteCmdh+0x1e>
 118:	00 00       	nop
    _delay_us(200);
    LCDEN_LOW;
 11a:	43 98       	cbi	0x08, 3	; 8
	
    tempy = (uint8_t) LEFTSHIFT_NIBBLE(cmd);	//!< Left Shift Byte Four Times
    tempy &= MSBNIBBLE_MASK;      //!<  Mask Higher 4 Bits
    LCDPORT &= LSBNIBBLE_MASK;	//!<  Make No Affect on 0ther Port Pins
 11c:	9b b1       	in	r25, 0x0b	; 11
 11e:	9f 70       	andi	r25, 0x0F	; 15
 120:	9b b9       	out	0x0b, r25	; 11
    LCDPORT |= tempy;				//!<  Send Lower Nibble to LCDPORT
 122:	9b b1       	in	r25, 0x0b	; 11
 124:	82 95       	swap	r24
 126:	80 7f       	andi	r24, 0xF0	; 240
 128:	89 2b       	or	r24, r25
 12a:	8b b9       	out	0x0b, r24	; 11
    LCDEN_HIGH;
 12c:	43 9a       	sbi	0x08, 3	; 8
 12e:	8f e1       	ldi	r24, 0x1F	; 31
 130:	93 e0       	ldi	r25, 0x03	; 3
 132:	01 97       	sbiw	r24, 0x01	; 1
 134:	f1 f7       	brne	.-4      	; 0x132 <_ZL11lcdWriteCmdh+0x38>
 136:	00 c0       	rjmp	.+0      	; 0x138 <_ZL11lcdWriteCmdh+0x3e>
 138:	00 00       	nop
    _delay_us(200);
    LCDEN_LOW;    
 13a:	43 98       	cbi	0x08, 3	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 13c:	ef e3       	ldi	r30, 0x3F	; 63
 13e:	ff e1       	ldi	r31, 0x1F	; 31
 140:	31 97       	sbiw	r30, 0x01	; 1
 142:	f1 f7       	brne	.-4      	; 0x140 <_ZL11lcdWriteCmdh+0x46>
 144:	00 c0       	rjmp	.+0      	; 0x146 <_ZL11lcdWriteCmdh+0x4c>
 146:	00 00       	nop
 148:	08 95       	ret

0000014a <_ZL12lcdWriteDatah>:
 ******************************************************************************/
static void lcdWriteData( uint8_t data )
{
    uint8_t tempy = data;    
    
    LCDRS_HIGH;
 14a:	44 9a       	sbi	0x08, 4	; 8
    tempy &= MSBNIBBLE_MASK;		//!<  Mask Lower 4 Bits
    LCDPORT &= LSBNIBBLE_MASK;	//!<  Make No Affect on other Port Pins
 14c:	9b b1       	in	r25, 0x0b	; 11
 14e:	9f 70       	andi	r25, 0x0F	; 15
 150:	9b b9       	out	0x0b, r25	; 11
    LCDPORT |= tempy;				//!<  Send Higher Nibble to LCDPORT
 152:	9b b1       	in	r25, 0x0b	; 11
 154:	28 2f       	mov	r18, r24
 156:	20 7f       	andi	r18, 0xF0	; 240
 158:	92 2b       	or	r25, r18
 15a:	9b b9       	out	0x0b, r25	; 11
    LCDEN_HIGH;
 15c:	43 9a       	sbi	0x08, 3	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 15e:	ef e1       	ldi	r30, 0x1F	; 31
 160:	f3 e0       	ldi	r31, 0x03	; 3
 162:	31 97       	sbiw	r30, 0x01	; 1
 164:	f1 f7       	brne	.-4      	; 0x162 <_ZL12lcdWriteDatah+0x18>
 166:	00 c0       	rjmp	.+0      	; 0x168 <_ZL12lcdWriteDatah+0x1e>
 168:	00 00       	nop
    _delay_us(200);
    LCDEN_LOW;
 16a:	43 98       	cbi	0x08, 3	; 8
    
    tempy = (uint8_t) LEFTSHIFT_NIBBLE(data);	//!< Left Shift Byte Four Times
    tempy &= MSBNIBBLE_MASK;		//!< Mask Higher 4 Bits
    LCDPORT &= LSBNIBBLE_MASK;	//!< Make No Affect on other Port Pins
 16c:	9b b1       	in	r25, 0x0b	; 11
 16e:	9f 70       	andi	r25, 0x0F	; 15
 170:	9b b9       	out	0x0b, r25	; 11
    LCDPORT |= tempy;				//!< Send Lower Nibble to LCDPORT
 172:	9b b1       	in	r25, 0x0b	; 11
 174:	82 95       	swap	r24
 176:	80 7f       	andi	r24, 0xF0	; 240
 178:	89 2b       	or	r24, r25
 17a:	8b b9       	out	0x0b, r24	; 11
    LCDEN_HIGH;
 17c:	43 9a       	sbi	0x08, 3	; 8
 17e:	8f e1       	ldi	r24, 0x1F	; 31
 180:	93 e0       	ldi	r25, 0x03	; 3
 182:	01 97       	sbiw	r24, 0x01	; 1
 184:	f1 f7       	brne	.-4      	; 0x182 <_ZL12lcdWriteDatah+0x38>
 186:	00 c0       	rjmp	.+0      	; 0x188 <_ZL12lcdWriteDatah+0x3e>
 188:	00 00       	nop
    _delay_us(200);
    LCDEN_LOW;
 18a:	43 98       	cbi	0x08, 3	; 8
 18c:	9a e6       	ldi	r25, 0x6A	; 106
 18e:	9a 95       	dec	r25
 190:	f1 f7       	brne	.-4      	; 0x18e <_ZL12lcdWriteDatah+0x44>
 192:	00 c0       	rjmp	.+0      	; 0x194 <_ZL12lcdWriteDatah+0x4a>
 194:	08 95       	ret

00000196 <_Z8lcdClearv>:
 * Info     : Just clear entire display and bring control to 1st line 1st position.
 ******************************************************************************/

void lcdClear(void)
{
    lcdWriteCmd(0x01);
 196:	81 e0       	ldi	r24, 0x01	; 1
 198:	0e 94 7d 00 	call	0xfa	; 0xfa <_ZL11lcdWriteCmdh>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 19c:	2f ef       	ldi	r18, 0xFF	; 255
 19e:	89 ef       	ldi	r24, 0xF9	; 249
 1a0:	90 e0       	ldi	r25, 0x00	; 0
 1a2:	21 50       	subi	r18, 0x01	; 1
 1a4:	80 40       	sbci	r24, 0x00	; 0
 1a6:	90 40       	sbci	r25, 0x00	; 0
 1a8:	e1 f7       	brne	.-8      	; 0x1a2 <_Z8lcdClearv+0xc>
 1aa:	00 c0       	rjmp	.+0      	; 0x1ac <_Z8lcdClearv+0x16>
 1ac:	00 00       	nop
 1ae:	08 95       	ret

000001b0 <_Z7lcdInitv>:
 * Para     : NULL
 * Return   : NULL
 * Info     : tO INITIALIZE THE 2X16 LCD MODULE
 ******************************************************************************/
void lcdInit( void )
{
 1b0:	0f 93       	push	r16
 1b2:	1f 93       	push	r17
 1b4:	cf 93       	push	r28
 1b6:	df 93       	push	r29
    uint8_t i = 0;
    
    LCDPORT_DIR = 0xF0;
 1b8:	80 ef       	ldi	r24, 0xF0	; 240
 1ba:	8a b9       	out	0x0a, r24	; 10
    LCDRS_PORT_DIR |= ( 1<< LCDRS );
 1bc:	3c 9a       	sbi	0x07, 4	; 7
    LCDRW_PORT_DIR |= ( 1<< LCDRW );
 1be:	3a 9a       	sbi	0x07, 2	; 7
    LCDEN_PORT_DIR |= ( 1<< LCDEN );
 1c0:	3b 9a       	sbi	0x07, 3	; 7
 1c2:	2f ef       	ldi	r18, 0xFF	; 255
 1c4:	83 ec       	ldi	r24, 0xC3	; 195
 1c6:	99 e0       	ldi	r25, 0x09	; 9
 1c8:	21 50       	subi	r18, 0x01	; 1
 1ca:	80 40       	sbci	r24, 0x00	; 0
 1cc:	90 40       	sbci	r25, 0x00	; 0
 1ce:	e1 f7       	brne	.-8      	; 0x1c8 <_Z7lcdInitv+0x18>
 1d0:	00 c0       	rjmp	.+0      	; 0x1d2 <_Z7lcdInitv+0x22>
 1d2:	00 00       	nop
 1d4:	c7 e0       	ldi	r28, 0x07	; 7
 1d6:	d1 e0       	ldi	r29, 0x01	; 1
 1d8:	00 e1       	ldi	r16, 0x10	; 16
 1da:	11 e0       	ldi	r17, 0x01	; 1
    
    _delay_ms(200);  // module Power ON time
    
    for( i=0; i<LCD_CMD_LENGTH; i++)
    {
        lcdWriteCmd(lcdInitCmd[i]);
 1dc:	89 91       	ld	r24, Y+
 1de:	0e 94 7d 00 	call	0xfa	; 0xfa <_ZL11lcdWriteCmdh>
 1e2:	8f e1       	ldi	r24, 0x1F	; 31
 1e4:	9e e4       	ldi	r25, 0x4E	; 78
 1e6:	01 97       	sbiw	r24, 0x01	; 1
 1e8:	f1 f7       	brne	.-4      	; 0x1e6 <_Z7lcdInitv+0x36>
 1ea:	00 c0       	rjmp	.+0      	; 0x1ec <_Z7lcdInitv+0x3c>
 1ec:	00 00       	nop
    LCDEN_PORT_DIR |= ( 1<< LCDEN );
    
    
    _delay_ms(200);  // module Power ON time
    
    for( i=0; i<LCD_CMD_LENGTH; i++)
 1ee:	c0 17       	cp	r28, r16
 1f0:	d1 07       	cpc	r29, r17
 1f2:	a1 f7       	brne	.-24     	; 0x1dc <_Z7lcdInitv+0x2c>
    {
        lcdWriteCmd(lcdInitCmd[i]);
        _delay_ms(5);
    }  
     
    lcdClear();
 1f4:	0e 94 cb 00 	call	0x196	; 0x196 <_Z8lcdClearv>
    return;
}
 1f8:	df 91       	pop	r29
 1fa:	cf 91       	pop	r28
 1fc:	1f 91       	pop	r17
 1fe:	0f 91       	pop	r16
 200:	08 95       	ret

00000202 <_Z13lcdMoveCursorhh>:
 ******************************************************************************/
void lcdMoveCursor(uint8_t line, uint8_t posi)
{
    uint8_t temp = 0;
    
    if( LCD_FIRSTLINE == line )
 202:	81 30       	cpi	r24, 0x01	; 1
 204:	19 f4       	brne	.+6      	; 0x20c <_Z13lcdMoveCursorhh+0xa>
    {   
        temp = (uint8_t) (FIRSTLINE_ADDRESS + posi); 
 206:	80 e8       	ldi	r24, 0x80	; 128
 208:	86 0f       	add	r24, r22
 20a:	06 c0       	rjmp	.+12     	; 0x218 <_Z13lcdMoveCursorhh+0x16>
    }
    else if ( LCD_SECONDLINE == line )
 20c:	82 30       	cpi	r24, 0x02	; 2
 20e:	19 f4       	brne	.+6      	; 0x216 <_Z13lcdMoveCursorhh+0x14>
    {   
        temp = (uint8_t) ( SECONDLINE_ADDRESS + posi ); 
 210:	80 e8       	ldi	r24, 0x80	; 128
 212:	86 0f       	add	r24, r22
 214:	01 c0       	rjmp	.+2      	; 0x218 <_Z13lcdMoveCursorhh+0x16>
 * Return   : NULL
 * Info     : Move cursor to needed place 
 ******************************************************************************/
void lcdMoveCursor(uint8_t line, uint8_t posi)
{
    uint8_t temp = 0;
 216:	80 e0       	ldi	r24, 0x00	; 0
    else if ( LCD_SECONDLINE == line )
    {   
        temp = (uint8_t) ( SECONDLINE_ADDRESS + posi ); 
    }
    
    lcdWriteCmd(temp);
 218:	0e 94 7d 00 	call	0xfa	; 0xfa <_ZL11lcdWriteCmdh>
 21c:	08 95       	ret

0000021e <_Z11lcdWriteStrhhPc>:
 * Para 3   : pointer to string want to write
 * Return   : NULL
 * Info     : Write a string in required line and position.
 ******************************************************************************/
void lcdWriteStr( volatile unsigned char lcdLine, uint8_t lcdPosi, char* lcdStr )
{
 21e:	ef 92       	push	r14
 220:	ff 92       	push	r15
 222:	0f 93       	push	r16
 224:	1f 93       	push	r17
 226:	cf 93       	push	r28
 228:	df 93       	push	r29
 22a:	1f 92       	push	r1
 22c:	cd b7       	in	r28, 0x3d	; 61
 22e:	de b7       	in	r29, 0x3e	; 62
 230:	89 83       	std	Y+1, r24	; 0x01
 232:	e4 2e       	mov	r14, r20
 234:	f5 2e       	mov	r15, r21
    //uint8_t temp = 0;
    char *strPtr = lcdStr;
    
    lcdMoveCursor(lcdLine, lcdPosi );   //!< Move Cursor to required place.
 236:	89 81       	ldd	r24, Y+1	; 0x01
 238:	0e 94 01 01 	call	0x202	; 0x202 <_Z13lcdMoveCursorhh>
 23c:	0e 2d       	mov	r16, r14
 23e:	1f 2d       	mov	r17, r15
    
    do
    {
        lcdWriteData(*strPtr++);    //!< Assumption : Initialize LCD with increment address config 
 240:	f8 01       	movw	r30, r16
 242:	81 91       	ld	r24, Z+
 244:	8f 01       	movw	r16, r30
 246:	0e 94 a5 00 	call	0x14a	; 0x14a <_ZL12lcdWriteDatah>
        
    }while(*strPtr != '\0');        //!< Write data to lcd untill reach null terminator. 
 24a:	f8 01       	movw	r30, r16
 24c:	80 81       	ld	r24, Z
 24e:	81 11       	cpse	r24, r1
 250:	f7 cf       	rjmp	.-18     	; 0x240 <_Z11lcdWriteStrhhPc+0x22>
    
    return;
}
 252:	0f 90       	pop	r0
 254:	df 91       	pop	r29
 256:	cf 91       	pop	r28
 258:	1f 91       	pop	r17
 25a:	0f 91       	pop	r16
 25c:	ff 90       	pop	r15
 25e:	ef 90       	pop	r14
 260:	08 95       	ret

00000262 <_Z12lcdWriteCharhhc>:
 * Para 3   : Byte to be write
 * Return   : NULL
 * Info     : Write a string in required line and position.
 ******************************************************************************/
void lcdWriteChar(uint8_t lcdCharLine, uint8_t lcdCharPosi, char byteToWrite )
{
 262:	cf 93       	push	r28
 264:	c4 2f       	mov	r28, r20
    lcdMoveCursor(lcdCharLine, lcdCharPosi );   //!< Move Cursor to required place.
 266:	0e 94 01 01 	call	0x202	; 0x202 <_Z13lcdMoveCursorhh>
    lcdWriteData(byteToWrite);
 26a:	8c 2f       	mov	r24, r28
 26c:	0e 94 a5 00 	call	0x14a	; 0x14a <_ZL12lcdWriteDatah>
}
 270:	cf 91       	pop	r28
 272:	08 95       	ret

00000274 <_exit>:
 274:	f8 94       	cli

00000276 <__stop_program>:
 276:	ff cf       	rjmp	.-2      	; 0x276 <__stop_program>
