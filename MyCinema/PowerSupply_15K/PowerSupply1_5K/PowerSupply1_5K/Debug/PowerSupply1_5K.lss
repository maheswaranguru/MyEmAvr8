
PowerSupply1_5K.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000001c  00800100  00000414  000004a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000414  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000005  0080011c  0080011c  000004c4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000004c4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000004f4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000120  00000000  00000000  00000534  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000014f2  00000000  00000000  00000654  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b17  00000000  00000000  00001b46  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000894  00000000  00000000  0000265d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000280  00000000  00000000  00002ef4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000083f  00000000  00000000  00003174  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000009c0  00000000  00000000  000039b3  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000e0  00000000  00000000  00004373  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__vector_16>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e4 e1       	ldi	r30, 0x14	; 20
  7c:	f4 e0       	ldi	r31, 0x04	; 4
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ac 31       	cpi	r26, 0x1C	; 28
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	ac e1       	ldi	r26, 0x1C	; 28
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a1 32       	cpi	r26, 0x21	; 33
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 a0 00 	call	0x140	; 0x140 <main>
  9e:	0c 94 08 02 	jmp	0x410	; 0x410 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <__vector_16>:
        _delay_ms(1);
    }
}

ISR(TIMER0_OVF_vect)
{
  a6:	1f 92       	push	r1
  a8:	0f 92       	push	r0
  aa:	0f b6       	in	r0, 0x3f	; 63
  ac:	0f 92       	push	r0
  ae:	11 24       	eor	r1, r1
  b0:	2f 93       	push	r18
  b2:	3f 93       	push	r19
  b4:	4f 93       	push	r20
  b6:	5f 93       	push	r21
  b8:	6f 93       	push	r22
  ba:	7f 93       	push	r23
  bc:	8f 93       	push	r24
  be:	9f 93       	push	r25
  c0:	af 93       	push	r26
  c2:	bf 93       	push	r27
  c4:	ef 93       	push	r30
  c6:	ff 93       	push	r31
    static uint16_t timerCnt = 0;
    
    TCNT0 = 4;
  c8:	84 e0       	ldi	r24, 0x04	; 4
  ca:	86 bd       	out	0x26, r24	; 38
    
   if( timerCnt++ >= 1000 )
  cc:	80 91 1d 01 	lds	r24, 0x011D	; 0x80011d <_ZZ11__vector_16E8timerCnt>
  d0:	90 91 1e 01 	lds	r25, 0x011E	; 0x80011e <_ZZ11__vector_16E8timerCnt+0x1>
  d4:	88 3e       	cpi	r24, 0xE8	; 232
  d6:	23 e0       	ldi	r18, 0x03	; 3
  d8:	92 07       	cpc	r25, r18
  da:	30 f4       	brcc	.+12     	; 0xe8 <__vector_16+0x42>
  dc:	01 96       	adiw	r24, 0x01	; 1
  de:	90 93 1e 01 	sts	0x011E, r25	; 0x80011e <_ZZ11__vector_16E8timerCnt+0x1>
  e2:	80 93 1d 01 	sts	0x011D, r24	; 0x80011d <_ZZ11__vector_16E8timerCnt>
  e6:	0c c0       	rjmp	.+24     	; 0x100 <__vector_16+0x5a>
   {
       timerCnt = 0;
  e8:	10 92 1e 01 	sts	0x011E, r1	; 0x80011e <_ZZ11__vector_16E8timerCnt+0x1>
  ec:	10 92 1d 01 	sts	0x011D, r1	; 0x80011d <_ZZ11__vector_16E8timerCnt>
       gpioTogglePin( &PORTC, PORTC0 );       
  f0:	60 e0       	ldi	r22, 0x00	; 0
  f2:	88 e2       	ldi	r24, 0x28	; 40
  f4:	90 e0       	ldi	r25, 0x00	; 0
  f6:	0e 94 d5 00 	call	0x1aa	; 0x1aa <_Z13gpioTogglePinPVhh>
       lcdUpdate = true;
  fa:	81 e0       	ldi	r24, 0x01	; 1
  fc:	80 93 1f 01 	sts	0x011F, r24	; 0x80011f <_ZL9lcdUpdate>
    }
  
}
 100:	ff 91       	pop	r31
 102:	ef 91       	pop	r30
 104:	bf 91       	pop	r27
 106:	af 91       	pop	r26
 108:	9f 91       	pop	r25
 10a:	8f 91       	pop	r24
 10c:	7f 91       	pop	r23
 10e:	6f 91       	pop	r22
 110:	5f 91       	pop	r21
 112:	4f 91       	pop	r20
 114:	3f 91       	pop	r19
 116:	2f 91       	pop	r18
 118:	0f 90       	pop	r0
 11a:	0f be       	out	0x3f, r0	; 63
 11c:	0f 90       	pop	r0
 11e:	1f 90       	pop	r1
 120:	18 95       	reti

00000122 <_Z10refreshLcdv>:
 ******************************************************************************/
void refreshLcd( void )
{
    static uint8_t secCnt = 0;
    
    lcdClear();
 122:	0e 94 3d 01 	call	0x27a	; 0x27a <_Z8lcdClearv>
    
    lcdWriteDecimal(2, 3, 4, secCnt++ );    
 126:	20 91 1c 01 	lds	r18, 0x011C	; 0x80011c <__data_end>
 12a:	81 e0       	ldi	r24, 0x01	; 1
 12c:	82 0f       	add	r24, r18
 12e:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <__data_end>
 132:	30 e0       	ldi	r19, 0x00	; 0
 134:	44 e0       	ldi	r20, 0x04	; 4
 136:	63 e0       	ldi	r22, 0x03	; 3
 138:	82 e0       	ldi	r24, 0x02	; 2
 13a:	0e 94 a9 01 	call	0x352	; 0x352 <_Z15lcdWriteDecimalhhhj>
 13e:	08 95       	ret

00000140 <main>:

static bool lcdUpdate = false;

int main(void)
{
    DDRC |= 0x01;     
 140:	38 9a       	sbi	0x07, 0	; 7
    PORTC |= (1<<PORTC0);
 142:	40 9a       	sbi	0x08, 0	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 144:	2f ef       	ldi	r18, 0xFF	; 255
 146:	83 ec       	ldi	r24, 0xC3	; 195
 148:	99 e0       	ldi	r25, 0x09	; 9
 14a:	21 50       	subi	r18, 0x01	; 1
 14c:	80 40       	sbci	r24, 0x00	; 0
 14e:	90 40       	sbci	r25, 0x00	; 0
 150:	e1 f7       	brne	.-8      	; 0x14a <main+0xa>
 152:	00 c0       	rjmp	.+0      	; 0x154 <main+0x14>
 154:	00 00       	nop
    
    _delay_ms(200);
     
   PORTC &= ~(1<<PORTC0);
 156:	40 98       	cbi	0x08, 0	; 8
    
    lcdInit();
 158:	0e 94 47 01 	call	0x28e	; 0x28e <_Z7lcdInitv>
    myTimer.Init ( ONE_SEC );
 15c:	63 e0       	ldi	r22, 0x03	; 3
 15e:	80 e2       	ldi	r24, 0x20	; 32
 160:	91 e0       	ldi	r25, 0x01	; 1
 162:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <_ZN12myEmAvrTimer4InitE12timerValue_t>
    PORTC |= (1<<PORTC0);
 166:	40 9a       	sbi	0x08, 0	; 8
    
    lcdWriteChar(1, 5, 'M' );
 168:	4d e4       	ldi	r20, 0x4D	; 77
 16a:	65 e0       	ldi	r22, 0x05	; 5
 16c:	81 e0       	ldi	r24, 0x01	; 1
 16e:	0e 94 a0 01 	call	0x340	; 0x340 <_Z12lcdWriteCharhhc>
   
    lcdWriteStr(1, 1, "Hi Dai");
 172:	40 e0       	ldi	r20, 0x00	; 0
 174:	51 e0       	ldi	r21, 0x01	; 1
 176:	61 e0       	ldi	r22, 0x01	; 1
 178:	81 e0       	ldi	r24, 0x01	; 1
 17a:	0e 94 7e 01 	call	0x2fc	; 0x2fc <_Z11lcdWriteStrhhPc>
    
     lcdWriteStr(2, 0, "Ithu rendu");
 17e:	47 e0       	ldi	r20, 0x07	; 7
 180:	51 e0       	ldi	r21, 0x01	; 1
 182:	60 e0       	ldi	r22, 0x00	; 0
 184:	82 e0       	ldi	r24, 0x02	; 2
 186:	0e 94 7e 01 	call	0x2fc	; 0x2fc <_Z11lcdWriteStrhhPc>
     
     sei();
 18a:	78 94       	sei
    while (1) 
    {
        if(lcdUpdate)
 18c:	80 91 1f 01 	lds	r24, 0x011F	; 0x80011f <_ZL9lcdUpdate>
 190:	88 23       	and	r24, r24
 192:	21 f0       	breq	.+8      	; 0x19c <main+0x5c>
        {
            refreshLcd();
 194:	0e 94 91 00 	call	0x122	; 0x122 <_Z10refreshLcdv>
            lcdUpdate = false;
 198:	10 92 1f 01 	sts	0x011F, r1	; 0x80011f <_ZL9lcdUpdate>
 19c:	8f e9       	ldi	r24, 0x9F	; 159
 19e:	9f e0       	ldi	r25, 0x0F	; 15
 1a0:	01 97       	sbiw	r24, 0x01	; 1
 1a2:	f1 f7       	brne	.-4      	; 0x1a0 <main+0x60>
 1a4:	00 c0       	rjmp	.+0      	; 0x1a6 <main+0x66>
 1a6:	00 00       	nop
 1a8:	f1 cf       	rjmp	.-30     	; 0x18c <main+0x4c>

000001aa <_Z13gpioTogglePinPVhh>:

#ifdef DIRECTION_INDEPENTENT 
	*(port-1) |= (1<<pin);  //!< Direction of pin confirmed
 #endif

	*port^=(1<<pin);  //!< toggle the pin HIGH
 1aa:	fc 01       	movw	r30, r24
 1ac:	40 81       	ld	r20, Z
 1ae:	21 e0       	ldi	r18, 0x01	; 1
 1b0:	30 e0       	ldi	r19, 0x00	; 0
 1b2:	02 c0       	rjmp	.+4      	; 0x1b8 <_Z13gpioTogglePinPVhh+0xe>
 1b4:	22 0f       	add	r18, r18
 1b6:	33 1f       	adc	r19, r19
 1b8:	6a 95       	dec	r22
 1ba:	e2 f7       	brpl	.-8      	; 0x1b4 <_Z13gpioTogglePinPVhh+0xa>
 1bc:	24 27       	eor	r18, r20
 1be:	20 83       	st	Z, r18
 1c0:	08 95       	ret

000001c2 <_ZN12myEmAvrTimer4InitE12timerValue_t>:
 ******************************************************************************/
void myEmAvrTimer :: Init ( timerValue_t timerValue )
{
    uint8_t temp;
    
    TCCR0A = 0x00;
 1c2:	14 bc       	out	0x24, r1	; 36
    TCCR0B |= (1<<CS00) | (1<<CS01); 
 1c4:	85 b5       	in	r24, 0x25	; 37
 1c6:	83 60       	ori	r24, 0x03	; 3
 1c8:	85 bd       	out	0x25, r24	; 37
    TIMSK0 |= (1<<TOIE0);
 1ca:	ee e6       	ldi	r30, 0x6E	; 110
 1cc:	f0 e0       	ldi	r31, 0x00	; 0
 1ce:	80 81       	ld	r24, Z
 1d0:	81 60       	ori	r24, 0x01	; 1
 1d2:	80 83       	st	Z, r24
    
    TCNT0 = 4;
 1d4:	84 e0       	ldi	r24, 0x04	; 4
 1d6:	86 bd       	out	0x26, r24	; 38
 1d8:	08 95       	ret

000001da <_ZL11lcdWriteCmdh>:
 ******************************************************************************/
static void lcdWriteCmd( uint8_t cmd )
{
    uint8_t tempy = cmd;
    
    LCDRS_LOW;
 1da:	44 98       	cbi	0x08, 4	; 8
    tempy &= MSBNIBBLE_MASK;		//!<  Mask Lower 4 Bits
    LCDPORT &= LSBNIBBLE_MASK;	//!<  Make No Affect on 0ther Port Pins
 1dc:	9b b1       	in	r25, 0x0b	; 11
 1de:	9f 70       	andi	r25, 0x0F	; 15
 1e0:	9b b9       	out	0x0b, r25	; 11
    LCDPORT |= tempy;				//!<  Send Higher Nibble to LCDPORT
 1e2:	9b b1       	in	r25, 0x0b	; 11
 1e4:	28 2f       	mov	r18, r24
 1e6:	20 7f       	andi	r18, 0xF0	; 240
 1e8:	92 2b       	or	r25, r18
 1ea:	9b b9       	out	0x0b, r25	; 11
    LCDEN_HIGH;
 1ec:	43 9a       	sbi	0x08, 3	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1ee:	ef e1       	ldi	r30, 0x1F	; 31
 1f0:	f3 e0       	ldi	r31, 0x03	; 3
 1f2:	31 97       	sbiw	r30, 0x01	; 1
 1f4:	f1 f7       	brne	.-4      	; 0x1f2 <_ZL11lcdWriteCmdh+0x18>
 1f6:	00 c0       	rjmp	.+0      	; 0x1f8 <_ZL11lcdWriteCmdh+0x1e>
 1f8:	00 00       	nop
    _delay_us(200);
    LCDEN_LOW;
 1fa:	43 98       	cbi	0x08, 3	; 8
	
    tempy = (uint8_t) LEFTSHIFT_NIBBLE(cmd);	//!< Left Shift Byte Four Times
    tempy &= MSBNIBBLE_MASK;      //!<  Mask Higher 4 Bits
    LCDPORT &= LSBNIBBLE_MASK;	//!<  Make No Affect on 0ther Port Pins
 1fc:	9b b1       	in	r25, 0x0b	; 11
 1fe:	9f 70       	andi	r25, 0x0F	; 15
 200:	9b b9       	out	0x0b, r25	; 11
    LCDPORT |= tempy;				//!<  Send Lower Nibble to LCDPORT
 202:	9b b1       	in	r25, 0x0b	; 11
 204:	82 95       	swap	r24
 206:	80 7f       	andi	r24, 0xF0	; 240
 208:	89 2b       	or	r24, r25
 20a:	8b b9       	out	0x0b, r24	; 11
    LCDEN_HIGH;
 20c:	43 9a       	sbi	0x08, 3	; 8
 20e:	8f e1       	ldi	r24, 0x1F	; 31
 210:	93 e0       	ldi	r25, 0x03	; 3
 212:	01 97       	sbiw	r24, 0x01	; 1
 214:	f1 f7       	brne	.-4      	; 0x212 <_ZL11lcdWriteCmdh+0x38>
 216:	00 c0       	rjmp	.+0      	; 0x218 <_ZL11lcdWriteCmdh+0x3e>
 218:	00 00       	nop
    _delay_us(200);
    LCDEN_LOW;    
 21a:	43 98       	cbi	0x08, 3	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 21c:	ef e3       	ldi	r30, 0x3F	; 63
 21e:	ff e1       	ldi	r31, 0x1F	; 31
 220:	31 97       	sbiw	r30, 0x01	; 1
 222:	f1 f7       	brne	.-4      	; 0x220 <_ZL11lcdWriteCmdh+0x46>
 224:	00 c0       	rjmp	.+0      	; 0x226 <_ZL11lcdWriteCmdh+0x4c>
 226:	00 00       	nop
 228:	08 95       	ret

0000022a <_ZL12lcdWriteDatah>:
 ******************************************************************************/
static void lcdWriteData( uint8_t data )
{
    uint8_t tempy = data;    
    
    LCDRS_HIGH;
 22a:	44 9a       	sbi	0x08, 4	; 8
    tempy &= MSBNIBBLE_MASK;		//!<  Mask Lower 4 Bits
    LCDPORT &= LSBNIBBLE_MASK;	//!<  Make No Affect on other Port Pins
 22c:	9b b1       	in	r25, 0x0b	; 11
 22e:	9f 70       	andi	r25, 0x0F	; 15
 230:	9b b9       	out	0x0b, r25	; 11
    LCDPORT |= tempy;				//!<  Send Higher Nibble to LCDPORT
 232:	9b b1       	in	r25, 0x0b	; 11
 234:	28 2f       	mov	r18, r24
 236:	20 7f       	andi	r18, 0xF0	; 240
 238:	92 2b       	or	r25, r18
 23a:	9b b9       	out	0x0b, r25	; 11
    LCDEN_HIGH;
 23c:	43 9a       	sbi	0x08, 3	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 23e:	ef e1       	ldi	r30, 0x1F	; 31
 240:	f3 e0       	ldi	r31, 0x03	; 3
 242:	31 97       	sbiw	r30, 0x01	; 1
 244:	f1 f7       	brne	.-4      	; 0x242 <_ZL12lcdWriteDatah+0x18>
 246:	00 c0       	rjmp	.+0      	; 0x248 <_ZL12lcdWriteDatah+0x1e>
 248:	00 00       	nop
    _delay_us(200);
    LCDEN_LOW;
 24a:	43 98       	cbi	0x08, 3	; 8
    
    tempy = (uint8_t) LEFTSHIFT_NIBBLE(data);	//!< Left Shift Byte Four Times
    tempy &= MSBNIBBLE_MASK;		//!< Mask Higher 4 Bits
    LCDPORT &= LSBNIBBLE_MASK;	//!< Make No Affect on other Port Pins
 24c:	9b b1       	in	r25, 0x0b	; 11
 24e:	9f 70       	andi	r25, 0x0F	; 15
 250:	9b b9       	out	0x0b, r25	; 11
    LCDPORT |= tempy;				//!< Send Lower Nibble to LCDPORT
 252:	9b b1       	in	r25, 0x0b	; 11
 254:	82 95       	swap	r24
 256:	80 7f       	andi	r24, 0xF0	; 240
 258:	89 2b       	or	r24, r25
 25a:	8b b9       	out	0x0b, r24	; 11
    LCDEN_HIGH;
 25c:	43 9a       	sbi	0x08, 3	; 8
 25e:	8f e1       	ldi	r24, 0x1F	; 31
 260:	93 e0       	ldi	r25, 0x03	; 3
 262:	01 97       	sbiw	r24, 0x01	; 1
 264:	f1 f7       	brne	.-4      	; 0x262 <_ZL12lcdWriteDatah+0x38>
 266:	00 c0       	rjmp	.+0      	; 0x268 <_ZL12lcdWriteDatah+0x3e>
 268:	00 00       	nop
    _delay_us(200);
    LCDEN_LOW;
 26a:	43 98       	cbi	0x08, 3	; 8
 26c:	ef e3       	ldi	r30, 0x3F	; 63
 26e:	f6 e0       	ldi	r31, 0x06	; 6
 270:	31 97       	sbiw	r30, 0x01	; 1
 272:	f1 f7       	brne	.-4      	; 0x270 <_ZL12lcdWriteDatah+0x46>
 274:	00 c0       	rjmp	.+0      	; 0x276 <_ZL12lcdWriteDatah+0x4c>
 276:	00 00       	nop
 278:	08 95       	ret

0000027a <_Z8lcdClearv>:
 * Info     : Just clear entire display and bring control to 1st line 1st position.
 ******************************************************************************/

void lcdClear(void)
{
    lcdWriteCmd(0x01);
 27a:	81 e0       	ldi	r24, 0x01	; 1
 27c:	0e 94 ed 00 	call	0x1da	; 0x1da <_ZL11lcdWriteCmdh>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 280:	8f e1       	ldi	r24, 0x1F	; 31
 282:	9e e4       	ldi	r25, 0x4E	; 78
 284:	01 97       	sbiw	r24, 0x01	; 1
 286:	f1 f7       	brne	.-4      	; 0x284 <_Z8lcdClearv+0xa>
 288:	00 c0       	rjmp	.+0      	; 0x28a <_Z8lcdClearv+0x10>
 28a:	00 00       	nop
 28c:	08 95       	ret

0000028e <_Z7lcdInitv>:
 * Para     : NULL
 * Return   : NULL
 * Info     : tO INITIALIZE THE 2X16 LCD MODULE
 ******************************************************************************/
void lcdInit( void )
{
 28e:	0f 93       	push	r16
 290:	1f 93       	push	r17
 292:	cf 93       	push	r28
 294:	df 93       	push	r29
    uint8_t i = 0;
    
    LCDPORT_DIR = 0xF0;
 296:	80 ef       	ldi	r24, 0xF0	; 240
 298:	8a b9       	out	0x0a, r24	; 10
    LCDRS_PORT_DIR |= ( 1<< LCDRS );
 29a:	3c 9a       	sbi	0x07, 4	; 7
    LCDRW_PORT_DIR |= ( 1<< LCDRW );
 29c:	3a 9a       	sbi	0x07, 2	; 7
    LCDEN_PORT_DIR |= ( 1<< LCDEN );
 29e:	3b 9a       	sbi	0x07, 3	; 7
 2a0:	2f ef       	ldi	r18, 0xFF	; 255
 2a2:	83 ec       	ldi	r24, 0xC3	; 195
 2a4:	99 e0       	ldi	r25, 0x09	; 9
 2a6:	21 50       	subi	r18, 0x01	; 1
 2a8:	80 40       	sbci	r24, 0x00	; 0
 2aa:	90 40       	sbci	r25, 0x00	; 0
 2ac:	e1 f7       	brne	.-8      	; 0x2a6 <_Z7lcdInitv+0x18>
 2ae:	00 c0       	rjmp	.+0      	; 0x2b0 <_Z7lcdInitv+0x22>
 2b0:	00 00       	nop
 2b2:	c2 e1       	ldi	r28, 0x12	; 18
 2b4:	d1 e0       	ldi	r29, 0x01	; 1
 2b6:	0b e1       	ldi	r16, 0x1B	; 27
 2b8:	11 e0       	ldi	r17, 0x01	; 1
    
    _delay_ms(200);  // module Power ON time
    
    for( i=0; i<LCD_CMD_LENGTH; i++)
    {
        lcdWriteCmd(lcdInitCmd[i]);
 2ba:	89 91       	ld	r24, Y+
 2bc:	0e 94 ed 00 	call	0x1da	; 0x1da <_ZL11lcdWriteCmdh>
 2c0:	8f e1       	ldi	r24, 0x1F	; 31
 2c2:	9e e4       	ldi	r25, 0x4E	; 78
 2c4:	01 97       	sbiw	r24, 0x01	; 1
 2c6:	f1 f7       	brne	.-4      	; 0x2c4 <_Z7lcdInitv+0x36>
 2c8:	00 c0       	rjmp	.+0      	; 0x2ca <_Z7lcdInitv+0x3c>
 2ca:	00 00       	nop
    LCDEN_PORT_DIR |= ( 1<< LCDEN );
    
    
    _delay_ms(200);  // module Power ON time
    
    for( i=0; i<LCD_CMD_LENGTH; i++)
 2cc:	c0 17       	cp	r28, r16
 2ce:	d1 07       	cpc	r29, r17
 2d0:	a1 f7       	brne	.-24     	; 0x2ba <_Z7lcdInitv+0x2c>
    {
        lcdWriteCmd(lcdInitCmd[i]);
        _delay_ms(5);
    }  
     
    lcdClear();
 2d2:	0e 94 3d 01 	call	0x27a	; 0x27a <_Z8lcdClearv>
    return;
}
 2d6:	df 91       	pop	r29
 2d8:	cf 91       	pop	r28
 2da:	1f 91       	pop	r17
 2dc:	0f 91       	pop	r16
 2de:	08 95       	ret

000002e0 <_Z13lcdMoveCursorhh>:
 ******************************************************************************/
void lcdMoveCursor(uint8_t line, uint8_t posi)
{
    uint8_t temp = 0;
    
    if( LCD_FIRSTLINE == line )
 2e0:	81 30       	cpi	r24, 0x01	; 1
 2e2:	19 f4       	brne	.+6      	; 0x2ea <_Z13lcdMoveCursorhh+0xa>
    {   
        temp = (uint8_t) (FIRSTLINE_ADDRESS + posi); 
 2e4:	80 e8       	ldi	r24, 0x80	; 128
 2e6:	86 0f       	add	r24, r22
 2e8:	06 c0       	rjmp	.+12     	; 0x2f6 <_Z13lcdMoveCursorhh+0x16>
    }
    else if ( LCD_SECONDLINE == line )
 2ea:	82 30       	cpi	r24, 0x02	; 2
 2ec:	19 f4       	brne	.+6      	; 0x2f4 <_Z13lcdMoveCursorhh+0x14>
    {   
        temp = (uint8_t) ( SECONDLINE_ADDRESS + posi ); 
 2ee:	80 ec       	ldi	r24, 0xC0	; 192
 2f0:	86 0f       	add	r24, r22
 2f2:	01 c0       	rjmp	.+2      	; 0x2f6 <_Z13lcdMoveCursorhh+0x16>
 * Return   : NULL
 * Info     : Move cursor to needed place 
 ******************************************************************************/
void lcdMoveCursor(uint8_t line, uint8_t posi)
{
    uint8_t temp = 0;
 2f4:	80 e0       	ldi	r24, 0x00	; 0
    else if ( LCD_SECONDLINE == line )
    {   
        temp = (uint8_t) ( SECONDLINE_ADDRESS + posi ); 
    }
    
    lcdWriteCmd(temp);
 2f6:	0e 94 ed 00 	call	0x1da	; 0x1da <_ZL11lcdWriteCmdh>
 2fa:	08 95       	ret

000002fc <_Z11lcdWriteStrhhPc>:
 * Para 3   : pointer to string want to write
 * Return   : NULL
 * Info     : Write a string in required line and position.
 ******************************************************************************/
void lcdWriteStr( volatile unsigned char lcdLine, uint8_t lcdPosi, char *lcdStr )
{
 2fc:	ef 92       	push	r14
 2fe:	ff 92       	push	r15
 300:	0f 93       	push	r16
 302:	1f 93       	push	r17
 304:	cf 93       	push	r28
 306:	df 93       	push	r29
 308:	1f 92       	push	r1
 30a:	cd b7       	in	r28, 0x3d	; 61
 30c:	de b7       	in	r29, 0x3e	; 62
 30e:	89 83       	std	Y+1, r24	; 0x01
 310:	e4 2e       	mov	r14, r20
 312:	f5 2e       	mov	r15, r21
    //uint8_t temp = 0;
    char *strPtr = lcdStr;
    
    lcdMoveCursor(lcdLine, lcdPosi );   //!< Move Cursor to required place.
 314:	89 81       	ldd	r24, Y+1	; 0x01
 316:	0e 94 70 01 	call	0x2e0	; 0x2e0 <_Z13lcdMoveCursorhh>
 31a:	0e 2d       	mov	r16, r14
 31c:	1f 2d       	mov	r17, r15
    
    do
    {
        lcdWriteData(*strPtr++);    //!< Assumption : Initialize LCD with increment address config 
 31e:	f8 01       	movw	r30, r16
 320:	81 91       	ld	r24, Z+
 322:	8f 01       	movw	r16, r30
 324:	0e 94 15 01 	call	0x22a	; 0x22a <_ZL12lcdWriteDatah>
        
    }while(*strPtr != '\0');        //!< Write data to lcd untill reach null terminator. 
 328:	f8 01       	movw	r30, r16
 32a:	80 81       	ld	r24, Z
 32c:	81 11       	cpse	r24, r1
 32e:	f7 cf       	rjmp	.-18     	; 0x31e <_Z11lcdWriteStrhhPc+0x22>
    
    return;
}
 330:	0f 90       	pop	r0
 332:	df 91       	pop	r29
 334:	cf 91       	pop	r28
 336:	1f 91       	pop	r17
 338:	0f 91       	pop	r16
 33a:	ff 90       	pop	r15
 33c:	ef 90       	pop	r14
 33e:	08 95       	ret

00000340 <_Z12lcdWriteCharhhc>:
 * Para 3   : Byte to be write
 * Return   : NULL
 * Info     : Write a string in required line and position.
 ******************************************************************************/
void lcdWriteChar(uint8_t lcdCharLine, uint8_t lcdCharPosi, char byteToWrite )
{
 340:	cf 93       	push	r28
 342:	c4 2f       	mov	r28, r20
    lcdMoveCursor(lcdCharLine, lcdCharPosi );   //!< Move Cursor to required place.
 344:	0e 94 70 01 	call	0x2e0	; 0x2e0 <_Z13lcdMoveCursorhh>
    lcdWriteData(byteToWrite);
 348:	8c 2f       	mov	r24, r28
 34a:	0e 94 15 01 	call	0x22a	; 0x22a <_ZL12lcdWriteDatah>
}
 34e:	cf 91       	pop	r28
 350:	08 95       	ret

00000352 <_Z15lcdWriteDecimalhhhj>:
 * Para2    : position in that line 
 * Return   : NULL
 * Info     : Move cursor to needed place 
 ******************************************************************************/
void lcdWriteDecimal( uint8_t line, uint8_t posi, uint8_t digi, uint16_t hexNum )
{
 352:	cf 92       	push	r12
 354:	df 92       	push	r13
 356:	ef 92       	push	r14
 358:	ff 92       	push	r15
 35a:	0f 93       	push	r16
 35c:	1f 93       	push	r17
 35e:	cf 93       	push	r28
 360:	df 93       	push	r29
 362:	c8 2e       	mov	r12, r24
 364:	e9 01       	movw	r28, r18
    unsigned int cnt = 0;
    unsigned int digitChar = 0;
    unsigned int temp = hexNum;    
        
    for( cnt = 1; cnt <= digi; cnt++ )
 366:	e4 2e       	mov	r14, r20
 368:	f1 2c       	mov	r15, r1
 36a:	e1 14       	cp	r14, r1
 36c:	f1 04       	cpc	r15, r1
 36e:	c1 f1       	breq	.+112    	; 0x3e0 <_Z15lcdWriteDecimalhhhj+0x8e>
 370:	61 50       	subi	r22, 0x01	; 1
 372:	d6 2e       	mov	r13, r22
 374:	d4 0e       	add	r13, r20
 376:	01 e0       	ldi	r16, 0x01	; 1
 378:	10 e0       	ldi	r17, 0x00	; 0
    {
        lcdMoveCursor(line, (posi + (digi - cnt) ) );   //!< Move Cursor to required place.
 37a:	6d 2d       	mov	r22, r13
 37c:	8c 2d       	mov	r24, r12
 37e:	0e 94 70 01 	call	0x2e0	; 0x2e0 <_Z13lcdMoveCursorhh>
        digitChar = temp % DECIMAL_DIV;
 382:	9e 01       	movw	r18, r28
 384:	ad ec       	ldi	r26, 0xCD	; 205
 386:	bc ec       	ldi	r27, 0xCC	; 204
 388:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <__umulhisi3>
 38c:	96 95       	lsr	r25
 38e:	87 95       	ror	r24
 390:	96 95       	lsr	r25
 392:	87 95       	ror	r24
 394:	96 95       	lsr	r25
 396:	87 95       	ror	r24
 398:	9c 01       	movw	r18, r24
 39a:	22 0f       	add	r18, r18
 39c:	33 1f       	adc	r19, r19
 39e:	88 0f       	add	r24, r24
 3a0:	99 1f       	adc	r25, r25
 3a2:	88 0f       	add	r24, r24
 3a4:	99 1f       	adc	r25, r25
 3a6:	88 0f       	add	r24, r24
 3a8:	99 1f       	adc	r25, r25
 3aa:	82 0f       	add	r24, r18
 3ac:	93 1f       	adc	r25, r19
 3ae:	9e 01       	movw	r18, r28
 3b0:	28 1b       	sub	r18, r24
 3b2:	39 0b       	sbc	r19, r25
 3b4:	c9 01       	movw	r24, r18
        digitChar |= ASCII_MASK;
        lcdWriteData( digitChar );
 3b6:	80 63       	ori	r24, 0x30	; 48
 3b8:	0e 94 15 01 	call	0x22a	; 0x22a <_ZL12lcdWriteDatah>
        temp = temp / DECIMAL_DIV;        
 3bc:	9e 01       	movw	r18, r28
 3be:	ad ec       	ldi	r26, 0xCD	; 205
 3c0:	bc ec       	ldi	r27, 0xCC	; 204
 3c2:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <__umulhisi3>
 3c6:	ec 01       	movw	r28, r24
 3c8:	d6 95       	lsr	r29
 3ca:	c7 95       	ror	r28
 3cc:	d6 95       	lsr	r29
 3ce:	c7 95       	ror	r28
 3d0:	d6 95       	lsr	r29
 3d2:	c7 95       	ror	r28
{
    unsigned int cnt = 0;
    unsigned int digitChar = 0;
    unsigned int temp = hexNum;    
        
    for( cnt = 1; cnt <= digi; cnt++ )
 3d4:	0f 5f       	subi	r16, 0xFF	; 255
 3d6:	1f 4f       	sbci	r17, 0xFF	; 255
 3d8:	da 94       	dec	r13
 3da:	e0 16       	cp	r14, r16
 3dc:	f1 06       	cpc	r15, r17
 3de:	68 f6       	brcc	.-102    	; 0x37a <_Z15lcdWriteDecimalhhhj+0x28>
        lcdWriteData( digitChar );
        temp = temp / DECIMAL_DIV;        
    }  
    
    return;
}
 3e0:	df 91       	pop	r29
 3e2:	cf 91       	pop	r28
 3e4:	1f 91       	pop	r17
 3e6:	0f 91       	pop	r16
 3e8:	ff 90       	pop	r15
 3ea:	ef 90       	pop	r14
 3ec:	df 90       	pop	r13
 3ee:	cf 90       	pop	r12
 3f0:	08 95       	ret

000003f2 <__umulhisi3>:
 3f2:	a2 9f       	mul	r26, r18
 3f4:	b0 01       	movw	r22, r0
 3f6:	b3 9f       	mul	r27, r19
 3f8:	c0 01       	movw	r24, r0
 3fa:	a3 9f       	mul	r26, r19
 3fc:	70 0d       	add	r23, r0
 3fe:	81 1d       	adc	r24, r1
 400:	11 24       	eor	r1, r1
 402:	91 1d       	adc	r25, r1
 404:	b2 9f       	mul	r27, r18
 406:	70 0d       	add	r23, r0
 408:	81 1d       	adc	r24, r1
 40a:	11 24       	eor	r1, r1
 40c:	91 1d       	adc	r25, r1
 40e:	08 95       	ret

00000410 <_exit>:
 410:	f8 94       	cli

00000412 <__stop_program>:
 412:	ff cf       	rjmp	.-2      	; 0x412 <__stop_program>
